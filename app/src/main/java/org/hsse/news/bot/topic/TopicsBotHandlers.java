package org.hsse.news.bot.topic;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.hsse.news.api.schemas.shared.TopicInfo;
import org.hsse.news.bot.BotMapping;
import org.hsse.news.bot.ChatId;
import org.hsse.news.bot.Message;
import org.hsse.news.bot.TelegramBot;
import org.hsse.news.database.topic.exceptions.QuantityLimitExceededTopicsPerUserException;
import org.hsse.news.database.topic.exceptions.TopicAlreadyExistsException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Component
public class TopicsBotHandlers {
    private final static String MENU_COMMAND = "/menu";
    private final static String TOPICS_MENU_COMMAND = "/topics";
    private final static String LIST_SUBBED_TOPICS_COMMAND = "/unblocked-topics";
    private final static String LIST_NOT_SUBBED_TOPICS_COMMAND = "/blocked-topics";
    private final static String VIEW_TOPIC_COMMAND = "/view-topic";
    private final static String SUB_TOPIC_COMMAND = "/unblock-topic";
    private final static String UNSUB_TOPIC_COMMAND = "/block-topic";
    private final static String SUB_CUSTOM_TOPIC_COMMAND = "/add-custom-topic";
    private final static String DELETE_CUSTOM_TOPIC = "/delete-custom-topic";
    private final static String TOPICS_INFO = "topics-info";

    private final static String BACK_TEXT = "–ù–∞–∑–∞–¥";

    private final String topicsInfo = "üì∞ –ë–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é.\n\n" +
            "üîπ –ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?\n" +
            "‚úî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 10 —Ç–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n" +
            "‚úî –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n" +
            "üìå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äî 10. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫, –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç–µ–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ.";

    private final TopicsDataProvider topicsDataProvider;
    private TelegramBot bot;

    public TopicsBotHandlers(final TopicsDataProvider topicsDataProvider) {
        this.topicsDataProvider = topicsDataProvider;
    }

    @Autowired
    @Lazy
    public void setBot(final TelegramBot bot) {
        this.bot = bot;
    }

    public void sendMessage(final ChatId chatId, final String text) {
        bot.sendMessage(chatId, Message.builder().text(text).build());
    }

    private InlineKeyboardMarkup topicsMenuKeyboard() {
        return new InlineKeyboardMarkup(List.of(
                List.of(InlineKeyboardButton.builder()
                        .text("–ü–æ–¥–ø–∏—Å–∞–Ω")
                        .callbackData(LIST_SUBBED_TOPICS_COMMAND).build()),
                List.of(InlineKeyboardButton.builder()
                        .text("–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
                        .callbackData(LIST_NOT_SUBBED_TOPICS_COMMAND).build()),
                List.of(InlineKeyboardButton.builder()
                        .text("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É")
                        .callbackData(SUB_CUSTOM_TOPIC_COMMAND).build()),
                List.of(InlineKeyboardButton.builder()
                        .text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                        .callbackData(TOPICS_INFO).build()),
                List.of(InlineKeyboardButton.builder()
                        .text(BACK_TEXT)
                        .callbackData(MENU_COMMAND).build())));
    }

    @BotMapping(TOPICS_INFO)
    public Message sendTopicsInfo(){
        return Message.builder().text(topicsInfo).keyboard(topicsMenuKeyboard()).build();
    }

    @BotMapping(TOPICS_MENU_COMMAND)
    public Message topicsMenu() {
        return Message.builder().text("–¢–µ–º—ã").keyboard(topicsMenuKeyboard()).build();
    }

    private Message buildTopicsListMenu(final String text, final List<TopicInfo> topics) {
        final List<InlineKeyboardButton> buttons = new ArrayList<>(
                topics.stream().map(
                        topic -> InlineKeyboardButton.builder()
                                .text(topic.description())
                                .callbackData(VIEW_TOPIC_COMMAND + " " + topic.topicID())
                                .build()).toList());
        buttons.add(InlineKeyboardButton.builder()
                .text(BACK_TEXT)
                .callbackData(TOPICS_MENU_COMMAND).build());
        return Message.builder().text(text).verticalKeyboard(buttons).build();
    }

    @SneakyThrows
    private Message viewTopicMessage(final Long topicId, final ChatId chatId) {
        final TopicInfo topic = topicsDataProvider.findTopic(topicId).orElseThrow();
        final String subCommand = (topicsDataProvider.isSubbedTopic(chatId.value(), topicId) 
                ? UNSUB_TOPIC_COMMAND 
                : SUB_TOPIC_COMMAND) + " " + topicId;

        if (!topicsDataProvider.isCustomCreatedTopicByUser(chatId.value(), topicId)) {
            return Message.builder().text(topic.description())
                    .verticalKeyboard(List.of(
                            InlineKeyboardButton.builder()
                                    .text(topicsDataProvider.isSubbedTopic(chatId.value(), topicId) ? "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
                                    .callbackData(subCommand).build(),
                            InlineKeyboardButton.builder()
                                    .text(BACK_TEXT)
                                    .callbackData(topicsDataProvider.isSubbedTopic(chatId.value(), topicId)
                                            ? LIST_SUBBED_TOPICS_COMMAND
                                            : LIST_NOT_SUBBED_TOPICS_COMMAND)
                                    .build())).build();
        }

        return Message.builder().text(topic.description())
                .verticalKeyboard(List.of(
                        InlineKeyboardButton.builder()
                                .text(topicsDataProvider.isSubbedTopic(chatId.value(), topicId) ? "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
                                .callbackData(subCommand).build(),
                        InlineKeyboardButton.builder()
                                .text("–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É")
                                .callbackData(DELETE_CUSTOM_TOPIC + " " + topicId).build(),
                        InlineKeyboardButton.builder()
                                .text(BACK_TEXT)
                                .callbackData(topicsDataProvider.isSubbedTopic(chatId.value(), topicId)
                                        ? LIST_SUBBED_TOPICS_COMMAND
                                        : LIST_NOT_SUBBED_TOPICS_COMMAND)
                                .build())).build();
    }

    private Message subOrUnsubTopic(final Long topicId, final ChatId chatId) {
        if (topicsDataProvider.isSubbedTopic(chatId.value(), topicId)) {
            topicsDataProvider.unSubTopic(chatId.value(), topicId);
            return viewUserSubTopics(chatId);
        } else {
            if (topicsDataProvider.subTopic(chatId.value(), topicId)) {
                return viewUserUnsubTopics(chatId);
            }
            sendMessage(chatId, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ç–µ–º—ã");
            return viewUserUnsubTopics(chatId);
        }
    }

    private Message createCustomTopic(final String text) {
        final List<String> args = Arrays.stream(text.split(" ")).toList();
        final long chatId = Long.parseLong(args.get(1));
        final String description = args.get(0);
        
        try {
            topicsDataProvider.createCustomTopic(chatId, description);
            return Message.builder()
                    .text("–¢–µ–º–∞ '" + description + "' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    .keyboard(topicsMenuKeyboard())
                    .build();
        } catch (TopicAlreadyExistsException e) {
            log.error("Error creating topic: {}", e.getMessage());
            sendMessage(new ChatId(chatId), "–¢–µ–º–∞ '" + description + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return Message.builder()
                    .text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É")
                    .keyboard(topicsMenuKeyboard())
                    .build();
        } catch (QuantityLimitExceededTopicsPerUserException e){
            return Message.builder()
                    .text("–¢–µ–º–∞ '" + description + "' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    .keyboard(topicsMenuKeyboard())
                    .build();
        }
    }

    @BotMapping(LIST_SUBBED_TOPICS_COMMAND)
    public Message viewUserSubTopics(final ChatId chatId) {
        return buildTopicsListMenu("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", 
                topicsDataProvider.getSubbedTopics(chatId.value()));
    }

    @BotMapping(LIST_NOT_SUBBED_TOPICS_COMMAND)
    public Message viewUserUnsubTopics(final ChatId chatId) {
        return buildTopicsListMenu("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:", 
                topicsDataProvider.getUnsubbedTopics(chatId.value()));
    }

    @BotMapping(VIEW_TOPIC_COMMAND)
    public Message viewTopic(final String arg, final ChatId chatId) {
        final Long topicId = Long.parseLong(arg);
        return viewTopicMessage(topicId, chatId);
    }

    @BotMapping(SUB_TOPIC_COMMAND)
    public Message subTopic(final String arg, final ChatId chatId) {
        final Long topicId = Long.parseLong(arg);
        return subOrUnsubTopic(topicId, chatId);
    }

    @BotMapping(UNSUB_TOPIC_COMMAND)
    public Message unsubTopic(final String arg, final ChatId chatId) {
        final Long topicId = Long.parseLong(arg);
        return subOrUnsubTopic(topicId, chatId);
    }

    @BotMapping(SUB_CUSTOM_TOPIC_COMMAND)
    public Message subCustomTopic(final ChatId chatId) {
        return Message.builder()
                .text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:")
                .singleButton(InlineKeyboardButton.builder()
                        .text("–û—Ç–º–µ–Ω–∞")
                        .callbackData(TOPICS_MENU_COMMAND)
                        .build())
                .onNextMessage(text -> createCustomTopic(text + " " + chatId.value()))
                .build();
    }

    @BotMapping(DELETE_CUSTOM_TOPIC)
    public Message deleteCustomTopic(final String arg, final ChatId chatId) {
        final Long topicId = Long.parseLong(arg);
        topicsDataProvider.deleteCustomTopic(chatId.value(), topicId);
        return viewUserSubTopics(chatId);
    }
}